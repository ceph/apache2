#! /bin/sh /usr/share/dpatch/dpatch-run
## 214_CVE-2011-3192_regression.dpatch by Steve Beattie <sbeattie@ubuntu.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: 
# Subject: fix regressions introduced by CVE-2011-3192 fixes
# Origin: upstream, patched through http://svn.apache.org/viewvc?view=revision&revision=1165607
#   + missing portion of http://svn.apache.org/viewvc?view=revision&revision=1177080
#
# This patch fixes additional regressions in the byte-range behaviors
# introduced by the previous fix to CVE-2011-3192. It includes all the
# fixes after the 2.2.0 release up to the 2.2.21 release directive.
# It also includes one fix staged for 2.2.22. --sbeattie

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' apache2-2.2.20~/modules/http/byterange_filter.c apache2-2.2.20/modules/http/byterange_filter.c
--- apache2-2.2.20~/modules/http/byterange_filter.c	2011-11-07 13:00:59.000000000 -0800
+++ apache2-2.2.20/modules/http/byterange_filter.c	2011-11-07 13:01:28.000000000 -0800
@@ -211,8 +211,8 @@
     char *bound_head = NULL;
     apr_array_header_t *indexes;
     indexes_t *idx;
-    int original_status;
     int i;
+    int original_status;
 
     /*
      * Iterate through the brigade until reaching EOS or a bucket with
@@ -256,7 +256,7 @@
         /* Is ap_make_content_type required here? */
         const char *orig_ct = ap_make_content_type(r, r->content_type);
         boundary = apr_psprintf(r->pool, "%" APR_UINT64_T_HEX_FMT "%lx",
-                                (apr_uint64_t)r->request_time, (long) getpid());
+                                (apr_uint64_t)r->request_time, c->id);
 
         ap_set_content_type(r, apr_pstrcat(r->pool, "multipart",
                                            use_range_x(r) ? "/x-" : "/",
@@ -484,6 +484,20 @@
             }
             else {                  /* "5-" */
                 end = clength - 1;
+                /*
+                 * special case: 0-
+                 *   ignore all other ranges provided
+                 *   return as a single range: 0-
+                 */
+                if (start == 0) {
+                    apr_array_clear(*indexes);
+                    idx = (indexes_t *)apr_array_push(*indexes);
+                    idx->start = start;
+                    idx->end = end;
+                    sum_lengths = clength;
+                    num_ranges = 1;
+                    break;
+                }
             }
         }
 
@@ -510,10 +524,9 @@
         /* If all ranges are unsatisfiable, we should return 416 */
         return -1;
     }
-
-    if (sum_lengths >= clength) {
+    if (sum_lengths > clength) {
         ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
-                      "Sum of ranges not smaller than file, ignoring.");
+                      "Sum of ranges larger than file, ignoring.");
         return 0;
     }
 
